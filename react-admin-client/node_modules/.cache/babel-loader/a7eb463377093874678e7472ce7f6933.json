{"ast":null,"code":"const path = require(\"path\");\n\nconst semver = require(\"semver\");\n\nconst {\n  log\n} = require(\"./logger\");\n\nconst {\n  projectRoot\n} = require(\"./paths\");\n\nlet envLoaded = false;\nconst CRA_LATEST_SUPPORTED_MAJOR_VERSION = \"4.0.0\";\n/************  Common  *******************/\n\nfunction resolveConfigFilePath(cracoConfig, fileName) {\n  if (!envLoaded) {\n    // Environment variables must be loaded before the CRA paths, otherwise they will not be applied.\n    require(resolveConfigFilePathInner(cracoConfig, \"env.js\"));\n\n    envLoaded = true;\n  }\n\n  return resolveConfigFilePathInner(cracoConfig, fileName);\n}\n\nfunction resolveConfigFilePathInner(cracoConfig, fileName) {\n  return require.resolve(path.join(cracoConfig.reactScriptsVersion, \"config\", fileName), {\n    paths: [projectRoot]\n  });\n}\n\nfunction resolveScriptsFilePath(cracoConfig, fileName) {\n  return require.resolve(path.join(cracoConfig.reactScriptsVersion, \"scripts\", fileName), {\n    paths: [projectRoot]\n  });\n}\n\nfunction resolveReactDevUtilsPath(fileName) {\n  return require.resolve(path.join(\"react-dev-utils\", fileName), {\n    paths: [projectRoot]\n  });\n}\n\nfunction overrideModule(modulePath, newModule) {\n  require.cache[modulePath].exports = newModule;\n  log(`Overrided require cache for module: ${modulePath}`);\n}\n\nfunction resolvePackageJson(cracoConfig) {\n  return require.resolve(path.join(cracoConfig.reactScriptsVersion, \"package.json\"), {\n    paths: [projectRoot]\n  });\n}\n\nfunction getReactScriptVersion(cracoConfig) {\n  const reactScriptPackageJsonPath = resolvePackageJson(cracoConfig);\n\n  const {\n    version\n  } = require(reactScriptPackageJsonPath);\n\n  return {\n    version,\n    isSupported: semver.gte(version, CRA_LATEST_SUPPORTED_MAJOR_VERSION)\n  };\n}\n/************  Paths  *******************/\n\n\nlet _resolvedCraPaths = null;\n\nfunction getCraPaths(cracoConfig) {\n  if (!_resolvedCraPaths) {\n    _resolvedCraPaths = require(resolveConfigFilePath(cracoConfig, \"paths.js\"));\n  }\n\n  return _resolvedCraPaths;\n}\n/************  Webpack Dev Config  *******************/\n\n\nfunction getWebpackDevConfigPath(cracoConfig) {\n  try {\n    return {\n      filepath: resolveConfigFilePath(cracoConfig, \"webpack.config.js\"),\n      isLegacy: false\n    };\n  } catch (e) {\n    return {\n      filepath: resolveConfigFilePath(cracoConfig, \"webpack.config.dev.js\"),\n      isLegacy: true\n    };\n  }\n}\n\nfunction loadWebpackDevConfig(cracoConfig) {\n  const result = getWebpackDevConfigPath(cracoConfig);\n  log(\"Found Webpack dev config at: \", result.filepath);\n\n  if (result.isLegacy) {\n    return require(result.filepath);\n  }\n\n  return require(result.filepath)(\"development\");\n}\n\nfunction overrideWebpackDevConfig(cracoConfig, newConfig) {\n  const result = getWebpackDevConfigPath(cracoConfig);\n\n  if (result.isLegacy) {\n    overrideModule(result.filepath, newConfig);\n  } else {\n    overrideModule(result.filepath, () => newConfig);\n  }\n\n  log(\"Overrided Webpack dev config.\");\n}\n/************  Webpack Prod Config  *******************/\n\n\nfunction getWebpackProdConfigPath(cracoConfig) {\n  try {\n    return {\n      filepath: resolveConfigFilePath(cracoConfig, \"webpack.config.js\"),\n      isLegacy: false\n    };\n  } catch (e) {\n    return {\n      filepath: resolveConfigFilePath(cracoConfig, \"webpack.config.prod.js\"),\n      isLegacy: true\n    };\n  }\n}\n\nfunction loadWebpackProdConfig(cracoConfig) {\n  const result = getWebpackProdConfigPath(cracoConfig);\n  log(\"Found Webpack prod config at: \", result.filepath);\n\n  if (result.isLegacy) {\n    return require(result.filepath);\n  }\n\n  return require(result.filepath)(\"production\");\n}\n\nfunction overrideWebpackProdConfig(cracoConfig, newConfig) {\n  const result = getWebpackProdConfigPath(cracoConfig);\n\n  if (result.isLegacy) {\n    overrideModule(result.filepath, newConfig);\n  } else {\n    overrideModule(result.filepath, () => newConfig);\n  }\n\n  log(\"Overrided Webpack prod config.\");\n}\n/************  Dev Server  *******************/\n\n\nfunction getDevServerConfigPath(cracoConfig) {\n  return resolveConfigFilePath(cracoConfig, \"webpackDevServer.config.js\");\n}\n\nfunction getDevServerUtilsPath() {\n  return resolveReactDevUtilsPath(\"WebpackDevServerUtils.js\");\n}\n\nfunction loadDevServerConfigProvider(cracoConfig) {\n  const filepath = getDevServerConfigPath(cracoConfig);\n  log(\"Found dev server config at: \", filepath);\n  return require(filepath);\n}\n\nfunction overrideDevServerConfigProvider(cracoConfig, configProvider) {\n  const filepath = getDevServerConfigPath(cracoConfig);\n  overrideModule(filepath, configProvider);\n  log(\"Overrided dev server config provider.\");\n}\n\nfunction loadDevServerUtils() {\n  const filepath = getDevServerUtilsPath();\n  log(\"Found dev server utils at: \", filepath);\n  return require(filepath);\n}\n\nfunction overrideDevServerUtils(newUtils) {\n  const filepath = getDevServerUtilsPath();\n  overrideModule(filepath, newUtils);\n  log(\"Overrided dev server utils.\");\n}\n/************  Jest  *******************/\n\n\nfunction getCreateJestConfigPath(cracoConfig) {\n  return resolveScriptsFilePath(cracoConfig, \"utils/createJestConfig.js\");\n}\n\nfunction loadJestConfigProvider(cracoConfig) {\n  const filepath = getCreateJestConfigPath(cracoConfig);\n  log(\"Found jest config at: \", filepath);\n  return require(filepath);\n}\n\nfunction overrideJestConfigProvider(cracoConfig, configProvider) {\n  const filepath = getCreateJestConfigPath(cracoConfig);\n  overrideModule(filepath, configProvider);\n  log(\"Overrided Jest config provider.\");\n}\n/************  Scripts  *******************/\n\n\nfunction start(cracoConfig) {\n  const filepath = resolveScriptsFilePath(cracoConfig, \"start.js\");\n  log(\"Starting CRA at: \", filepath);\n\n  require(filepath);\n}\n\nfunction build(cracoConfig) {\n  const filepath = resolveScriptsFilePath(cracoConfig, \"build.js\");\n  log(\"Building CRA at: \", filepath);\n\n  require(filepath);\n}\n\nfunction test(cracoConfig) {\n  const filepath = resolveScriptsFilePath(cracoConfig, \"test.js\");\n  log(\"Testing CRA at: \", filepath);\n\n  require(filepath);\n}\n/************  Exports  *******************/\n\n\nmodule.exports = {\n  loadWebpackDevConfig,\n  overrideWebpackDevConfig,\n  loadWebpackProdConfig,\n  overrideWebpackProdConfig,\n  loadDevServerConfigProvider,\n  overrideDevServerConfigProvider,\n  loadDevServerUtils,\n  overrideDevServerUtils,\n  loadJestConfigProvider,\n  overrideJestConfigProvider,\n  getCraPaths,\n  getReactScriptVersion,\n  start,\n  build,\n  test\n};","map":{"version":3,"sources":["/Users/inupedia/Downloads/eCommerce Platform/react-admin-client/node_modules/@craco/craco/lib/cra.js"],"names":["path","require","semver","log","projectRoot","envLoaded","CRA_LATEST_SUPPORTED_MAJOR_VERSION","resolveConfigFilePath","cracoConfig","fileName","resolveConfigFilePathInner","resolve","join","reactScriptsVersion","paths","resolveScriptsFilePath","resolveReactDevUtilsPath","overrideModule","modulePath","newModule","cache","exports","resolvePackageJson","getReactScriptVersion","reactScriptPackageJsonPath","version","isSupported","gte","_resolvedCraPaths","getCraPaths","getWebpackDevConfigPath","filepath","isLegacy","e","loadWebpackDevConfig","result","overrideWebpackDevConfig","newConfig","getWebpackProdConfigPath","loadWebpackProdConfig","overrideWebpackProdConfig","getDevServerConfigPath","getDevServerUtilsPath","loadDevServerConfigProvider","overrideDevServerConfigProvider","configProvider","loadDevServerUtils","overrideDevServerUtils","newUtils","getCreateJestConfigPath","loadJestConfigProvider","overrideJestConfigProvider","start","build","test","module"],"mappings":"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","sourcesContent":["const path = require(\"path\");\nconst semver = require(\"semver\");\n\nconst { log } = require(\"./logger\");\nconst { projectRoot } = require(\"./paths\");\n\nlet envLoaded = false;\nconst CRA_LATEST_SUPPORTED_MAJOR_VERSION = \"4.0.0\";\n\n/************  Common  *******************/\n\nfunction resolveConfigFilePath(cracoConfig, fileName) {\n    if (!envLoaded) {\n        // Environment variables must be loaded before the CRA paths, otherwise they will not be applied.\n        require(resolveConfigFilePathInner(cracoConfig, \"env.js\"));\n\n        envLoaded = true;\n    }\n\n    return resolveConfigFilePathInner(cracoConfig, fileName);\n}\n\nfunction resolveConfigFilePathInner(cracoConfig, fileName) {\n    return require.resolve(path.join(cracoConfig.reactScriptsVersion, \"config\", fileName), { paths: [projectRoot] });\n}\n\nfunction resolveScriptsFilePath(cracoConfig, fileName) {\n    return require.resolve(path.join(cracoConfig.reactScriptsVersion, \"scripts\", fileName), { paths: [projectRoot] });\n}\n\nfunction resolveReactDevUtilsPath(fileName) {\n    return require.resolve(path.join(\"react-dev-utils\", fileName), { paths: [projectRoot] });\n}\n\nfunction overrideModule(modulePath, newModule) {\n    require.cache[modulePath].exports = newModule;\n\n    log(`Overrided require cache for module: ${modulePath}`);\n}\n\nfunction resolvePackageJson(cracoConfig) {\n    return require.resolve(path.join(cracoConfig.reactScriptsVersion, \"package.json\"), { paths: [projectRoot] });\n}\n\nfunction getReactScriptVersion(cracoConfig) {\n    const reactScriptPackageJsonPath = resolvePackageJson(cracoConfig);\n    const { version } = require(reactScriptPackageJsonPath);\n\n    return {\n        version,\n        isSupported: semver.gte(version, CRA_LATEST_SUPPORTED_MAJOR_VERSION)\n    };\n}\n\n/************  Paths  *******************/\n\nlet _resolvedCraPaths = null;\n\nfunction getCraPaths(cracoConfig) {\n    if (!_resolvedCraPaths) {\n        _resolvedCraPaths = require(resolveConfigFilePath(cracoConfig, \"paths.js\"));\n    }\n\n    return _resolvedCraPaths;\n}\n\n/************  Webpack Dev Config  *******************/\n\nfunction getWebpackDevConfigPath(cracoConfig) {\n    try {\n        return {\n            filepath: resolveConfigFilePath(cracoConfig, \"webpack.config.js\"),\n            isLegacy: false\n        };\n    } catch (e) {\n        return {\n            filepath: resolveConfigFilePath(cracoConfig, \"webpack.config.dev.js\"),\n            isLegacy: true\n        };\n    }\n}\n\nfunction loadWebpackDevConfig(cracoConfig) {\n    const result = getWebpackDevConfigPath(cracoConfig);\n\n    log(\"Found Webpack dev config at: \", result.filepath);\n\n    if (result.isLegacy) {\n        return require(result.filepath);\n    }\n\n    return require(result.filepath)(\"development\");\n}\n\nfunction overrideWebpackDevConfig(cracoConfig, newConfig) {\n    const result = getWebpackDevConfigPath(cracoConfig);\n\n    if (result.isLegacy) {\n        overrideModule(result.filepath, newConfig);\n    } else {\n        overrideModule(result.filepath, () => newConfig);\n    }\n\n    log(\"Overrided Webpack dev config.\");\n}\n\n/************  Webpack Prod Config  *******************/\n\nfunction getWebpackProdConfigPath(cracoConfig) {\n    try {\n        return {\n            filepath: resolveConfigFilePath(cracoConfig, \"webpack.config.js\"),\n            isLegacy: false\n        };\n    } catch (e) {\n        return {\n            filepath: resolveConfigFilePath(cracoConfig, \"webpack.config.prod.js\"),\n            isLegacy: true\n        };\n    }\n}\n\nfunction loadWebpackProdConfig(cracoConfig) {\n    const result = getWebpackProdConfigPath(cracoConfig);\n\n    log(\"Found Webpack prod config at: \", result.filepath);\n\n    if (result.isLegacy) {\n        return require(result.filepath);\n    }\n\n    return require(result.filepath)(\"production\");\n}\n\nfunction overrideWebpackProdConfig(cracoConfig, newConfig) {\n    const result = getWebpackProdConfigPath(cracoConfig);\n\n    if (result.isLegacy) {\n        overrideModule(result.filepath, newConfig);\n    } else {\n        overrideModule(result.filepath, () => newConfig);\n    }\n\n    log(\"Overrided Webpack prod config.\");\n}\n\n/************  Dev Server  *******************/\n\nfunction getDevServerConfigPath(cracoConfig) {\n    return resolveConfigFilePath(cracoConfig, \"webpackDevServer.config.js\");\n}\n\nfunction getDevServerUtilsPath() {\n    return resolveReactDevUtilsPath(\"WebpackDevServerUtils.js\");\n}\n\nfunction loadDevServerConfigProvider(cracoConfig) {\n    const filepath = getDevServerConfigPath(cracoConfig);\n\n    log(\"Found dev server config at: \", filepath);\n\n    return require(filepath);\n}\n\nfunction overrideDevServerConfigProvider(cracoConfig, configProvider) {\n    const filepath = getDevServerConfigPath(cracoConfig);\n\n    overrideModule(filepath, configProvider);\n\n    log(\"Overrided dev server config provider.\");\n}\n\nfunction loadDevServerUtils() {\n    const filepath = getDevServerUtilsPath();\n\n    log(\"Found dev server utils at: \", filepath);\n\n    return require(filepath);\n}\n\nfunction overrideDevServerUtils(newUtils) {\n    const filepath = getDevServerUtilsPath();\n\n    overrideModule(filepath, newUtils);\n\n    log(\"Overrided dev server utils.\");\n}\n\n/************  Jest  *******************/\n\nfunction getCreateJestConfigPath(cracoConfig) {\n    return resolveScriptsFilePath(cracoConfig, \"utils/createJestConfig.js\");\n}\n\nfunction loadJestConfigProvider(cracoConfig) {\n    const filepath = getCreateJestConfigPath(cracoConfig);\n\n    log(\"Found jest config at: \", filepath);\n\n    return require(filepath);\n}\n\nfunction overrideJestConfigProvider(cracoConfig, configProvider) {\n    const filepath = getCreateJestConfigPath(cracoConfig);\n\n    overrideModule(filepath, configProvider);\n\n    log(\"Overrided Jest config provider.\");\n}\n\n/************  Scripts  *******************/\n\nfunction start(cracoConfig) {\n    const filepath = resolveScriptsFilePath(cracoConfig, \"start.js\");\n\n    log(\"Starting CRA at: \", filepath);\n\n    require(filepath);\n}\n\nfunction build(cracoConfig) {\n    const filepath = resolveScriptsFilePath(cracoConfig, \"build.js\");\n\n    log(\"Building CRA at: \", filepath);\n\n    require(filepath);\n}\n\nfunction test(cracoConfig) {\n    const filepath = resolveScriptsFilePath(cracoConfig, \"test.js\");\n\n    log(\"Testing CRA at: \", filepath);\n\n    require(filepath);\n}\n\n/************  Exports  *******************/\n\nmodule.exports = {\n    loadWebpackDevConfig,\n    overrideWebpackDevConfig,\n    loadWebpackProdConfig,\n    overrideWebpackProdConfig,\n    loadDevServerConfigProvider,\n    overrideDevServerConfigProvider,\n    loadDevServerUtils,\n    overrideDevServerUtils,\n    loadJestConfigProvider,\n    overrideJestConfigProvider,\n    getCraPaths,\n    getReactScriptVersion,\n    start,\n    build,\n    test\n};\n"]},"metadata":{},"sourceType":"script"}